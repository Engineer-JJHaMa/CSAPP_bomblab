00000000004015c4 <phase_defused>:
  4015c4:	48 83 ec 78          	sub    $0x78,%rsp
  4015c8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4015cf:	00 00 
  4015d1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  4015d6:	31 c0                	xor    %eax,%eax
  // w입력 문자열이 6개 있을 대 검사하는 것 같다.
  4015d8:	83 3d 81 21 20 00 06 	cmpl   $0x6,0x202181(%rip)        # 603760 <num_input_strings>
  4015df:	75 5e                	jne    40163f <phase_defused+0x7b>
  // rsp+16 -> r8
  4015e1:	4c 8d 44 24 10       	lea    0x10(%rsp),%r8
  // rsp+12 -> rcx
  4015e6:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx
  // rsp+8 -> rdx
  4015eb:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  // "%d %d %s"
  4015f0:	be 19 26 40 00       	mov    $0x402619,%esi
  // "7 0"
  4015f5:	bf 70 38 60 00       	mov    $0x603870,%edi
  4015fa:	e8 f1 f5 ff ff       	callq  400bf0 <__isoc99_sscanf@plt>
  4015ff:	83 f8 03             	cmp    $0x3,%eax
  401602:	75 31                	jne    401635 <phase_defused+0x71>
  // "DrEvil"
  401604:	be 22 26 40 00       	mov    $0x402622,%esi
  // 문자열이 같아야 이어서 진행
  401609:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  40160e:	e8 25 fd ff ff       	callq  401338 <strings_not_equal>
  401613:	85 c0                	test   %eax,%eax
  401615:	75 1e                	jne    401635 <phase_defused+0x71>
  // "Curses, you've found the secret
  401617:	bf f8 24 40 00       	mov    $0x4024f8,%edi
  40161c:	e8 ef f4 ff ff       	callq  400b10 <puts@plt>
  // "But finding it and solving it are quite different..."
  401621:	bf 20 25 40 00       	mov    $0x402520,%edi
  401626:	e8 e5 f4 ff ff       	callq  400b10 <puts@plt>
  40162b:	b8 00 00 00 00       	mov    $0x0,%eax
  // secret_phase 진입
  // 정확히 이해가 안가서 인터넷을 참조했다.
  // phase_4 답안인 정수 뒤에 DrEvil을 붙임으로써 진입된다.
  401630:	e8 0d fc ff ff       	callq  401242 <secret_phase>
  401635:	bf 58 25 40 00       	mov    $0x402558,%edi
  40163a:	e8 d1 f4 ff ff       	callq  400b10 <puts@plt>
  40163f:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  401644:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  40164b:	00 00 
  40164d:	74 05                	je     401654 <phase_defused+0x90>
  40164f:	e8 dc f4 ff ff       	callq  400b30 <__stack_chk_fail@plt>
  401654:	48 83 c4 78          	add    $0x78,%rsp
  401658:	c3                   	retq   
  401659:	90                   	nop
  40165a:	90                   	nop
  40165b:	90                   	nop
  40165c:	90                   	nop
  40165d:	90                   	nop
  40165e:	90                   	nop
  40165f:	90                   	nop
  
  0000000000401242 <secret_phase>:
  401242:	53                   	push   %rbx
  // 1. 한 줄 읽어오기
  401243:	e8 56 02 00 00       	callq  40149e <read_line>
  // 2. 10 -> edx
  401248:	ba 0a 00 00 00       	mov    $0xa,%edx
  // 3. 0 -> esi
  40124d:	be 00 00 00 00       	mov    $0x0,%esi
  // 4. rax -> rdi
  401252:	48 89 c7             	mov    %rax,%rdi
  // 5. strol 함수 호출.
  // 위의 인수들을 참고하면, 문자열을 10진수로 변환시켜 준다.
  401255:	e8 76 f9 ff ff       	callq  400bd0 <strtol@plt>
  // 6. rax -> rbx
  40125a:	48 89 c3             	mov    %rax,%rbx
  // 7. rax-1 -> eax
  40125d:	8d 40 ff             	lea    -0x1(%rax),%eax
  // 8. 1000 >= eax 이지 않으면 펑
  401260:	3d e8 03 00 00       	cmp    $0x3e8,%eax
  401265:	76 05                	jbe    40126c <secret_phase+0x2a>
  401267:	e8 ce 01 00 00       	callq  40143a <explode_bomb>
  // 9. ebx -> esi
  40126c:	89 de                	mov    %ebx,%esi
  // 월 넣은지 불확실하지만 fun7 호출
  // 확인하고 오니 트리 꼭대기였다.
  40126e:	bf f0 30 60 00       	mov    $0x6030f0,%edi
  401273:	e8 8c ff ff ff       	callq  401204 <fun7>
  // 14. eax == 2 이면 통과한다.
  401278:	83 f8 02             	cmp    $0x2,%eax
  40127b:	74 05                	je     401282 <secret_phase+0x40>
  40127d:	e8 b8 01 00 00       	callq  40143a <explode_bomb>
  401282:	bf 38 24 40 00       	mov    $0x402438,%edi
  401287:	e8 84 f8 ff ff       	callq  400b10 <puts@plt>
  40128c:	e8 33 03 00 00       	callq  4015c4 <phase_defused>
  401291:	5b                   	pop    %rbx
  401292:	c3                   	retq   
  401293:	90                   	nop
  401294:	90                   	nop
  401295:	90                   	nop
  401296:	90                   	nop
  401297:	90                   	nop
  401298:	90                   	nop
  401299:	90                   	nop
  40129a:	90                   	nop
  40129b:	90                   	nop
  40129c:	90                   	nop
  40129d:	90                   	nop
  40129e:	90                   	nop
  40129f:	90                   	nop
  
  0000000000401204 <fun7>:
  // 10. 8바이트 사용
  401204:	48 83 ec 08          	sub    $0x8,%rsp
  // 11. rdi != 0 이므로 점프하지 않는다.
  401208:	48 85 ff             	test   %rdi,%rdi
  40120b:	74 2b                	je     401238 <fun7+0x34>
  // 12. (rdi) -> edx
  // 참조해보니 n1 == 36이다.
  40120d:	8b 17                	mov    (%rdi),%edx
  // 13. esi >= edx 이면 점프
  40120f:	39 f2                	cmp    %esi,%edx
  401211:	7e 0d                	jle    401220 <fun7+0x1c>
  // 13-1. 점프하지 않는경우
  // (rdi+8) -> rdi; n21 == 8
  401213:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  // 재귀
  401217:	e8 e8 ff ff ff       	callq  401204 <fun7>
  // 돌아와선 eax * 2 -> eax
  40121c:	01 c0                	add    %eax,%eax
  40121e:	eb 1d                	jmp    40123d <fun7+0x39>
  // 13-2. 점프한 경우
  // 0 -> eax
  401220:	b8 00 00 00 00       	mov    $0x0,%eax
  // esi == edx 이면 점프
  401225:	39 f2                	cmp    %esi,%edx
  401227:	74 14                	je     40123d <fun7+0x39>
  // 아니라면 (rdi+16) -> rdi; n22 == 50
  401229:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  // 재귀
  40122d:	e8 d2 ff ff ff       	callq  401204 <fun7>
  // 2*rax+1 -> rax
  401232:	8d 44 00 01          	lea    0x1(%rax,%rax,1),%eax
  401236:	eb 05                	jmp    40123d <fun7+0x39>
  401238:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  // 트리를 탐색하는 구조이다.
  // 노드의 값과 입력값이 일치할 때 까지 재귀를 통해 탐색을 진행한다.
  // 결과적으로 rsi의 정수와 동일한 값을 가지는 node의 주소값이 rdi로 리턴된다.
  // 추가로 탐색 경로에 따라 eax에 특정한 연산이 가해진다.
  // 마지막 재귀에서 eax가 0이 되므로 역추적해서 eax가 리턴시 2가되도록 해야 할 것 같다.
  // 거꾸로 가보면 0 -> 2*0 + 1 == 1 -> 2*1 == 2 로 2를 만들 수 있다.
  // 즉 트리 탐색 시작 후 왼쪽으로 한번 오른쪽으로 한번 가면된다.
  //     36
  //   8
  // ?   22
  // 필요한 트리 부분만 따오면 위와같이 생겼다. 따라서 22를 넣으면 eax가 2로 리턴될 것이다.
  // 특이한 점으로는 답을 미리 적어놓을 수 없고 secret_phase 진입 후 직접 22를 입력해 주어야 한다.
  // 그래서 답안을 2개 만들어 두었다.
  40123d:	48 83 c4 08          	add    $0x8,%rsp
  401241:	c3                   	retq   
