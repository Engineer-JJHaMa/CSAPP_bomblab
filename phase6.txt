00000000004010f4 <phase_6>:
  // 0. 레지스터 저장
  4010f4:	41 56                	push   %r14
  4010f6:	41 55                	push   %r13
  4010f8:	41 54                	push   %r12
  4010fa:	55                   	push   %rbp
  4010fb:	53                   	push   %rbx
  // 1. 80바이트 이용
  4010fc:	48 83 ec 50          	sub    $0x50,%rsp
  // 2. rsp -> r13
  401100:	49 89 e5             	mov    %rsp,%r13
  // 3. 숫자 6개 읽어오기
  401103:	48 89 e6             	mov    %rsp,%rsi
  401106:	e8 51 03 00 00       	callq  40145c <read_six_numbers>
  // 4. rsp -> r14
  40110b:	49 89 e6             	mov    %rsp,%r14
  // 5. 0 -> r12d
  40110e:	41 bc 00 00 00 00    	mov    $0x0,%r12d
  // 6. r13 -> rbp; 처음에는 rsp; r13을 베이스로 삼는다.
  // 18. 루프, r13이 4 증가했다.
  401114:	4c 89 ed             	mov    %r13,%rbp
  // 7. (r13) -> eax; 들어있는 정수를 eax로 복사한다.
  401117:	41 8b 45 00          	mov    0x0(%r13),%eax
  // 8. eax - 1 -> eax
  40111b:	83 e8 01             	sub    $0x1,%eax
  // 9. 5 >= eax이면 통과; 모든 정수는 6 이하여야 한다?
  40111e:	83 f8 05             	cmp    $0x5,%eax
  401121:	76 05                	jbe    401128 <phase_6+0x34>
  401123:	e8 12 03 00 00       	callq  40143a <explode_bomb>
  // 10. r12d + 1 -> r12d; 루프 카운터 i인 듯 하다.
  401128:	41 83 c4 01          	add    $0x1,%r12d
  // 11. r12d == 6 일 경우 점프; 처음에는 1일듯 하다
  40112c:	41 83 fc 06          	cmp    $0x6,%r12d
  401130:	74 21                	je     401153 <phase_6+0x5f>
  // 12. r12d -> ebx
  401132:	44 89 e3             	mov    %r12d,%ebx
  // 13. ebx -> rax; 작은 루프 시작. ebx가 j인 듯 하다.
  // 대강 서도 다른 6이하 정수 6개를 써야하는 통과되는 듯 하다.
  401135:	48 63 c3             	movslq %ebx,%rax
  // 14. (rsp + 4*rax) -> rax; n번째 루프에서 n+1번째 정수 참조
  401138:	8b 04 84             	mov    (%rsp,%rax,4),%eax
  // 15. eax == (rbp) 이면 폭발
  40113b:	39 45 00             	cmp    %eax,0x0(%rbp)
  40113e:	75 05                	jne    401145 <phase_6+0x51>
  401140:	e8 f5 02 00 00       	callq  40143a <explode_bomb>
  // 16. 1 -> ebx
  401145:	83 c3 01             	add    $0x1,%ebx
  // 17. 5 >= ebx 일 경우 점프
  401148:	83 fb 05             	cmp    $0x5,%ebx
  40114b:	7e e8                	jle    401135 <phase_6+0x41>
  // 18. r13 + 4 -> r13
  40114d:	49 83 c5 04          	add    $0x4,%r13
  // 큰 루프 종점
  401151:	eb c1                	jmp    401114 <phase_6+0x20>
  // 루프 끝
  // 19. rsp+24 -> rsi
  401153:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  // 20. r14 -> rax
  401158:	4c 89 f0             	mov    %r14,%rax
  // 21. 7 -> ecx
  40115b:	b9 07 00 00 00       	mov    $0x7,%ecx
  // 22. ecx -> edx; 루프 시작점
  401160:	89 ca                	mov    %ecx,%edx
  // 23. edx - (rax) -> edx
  401162:	2b 10                	sub    (%rax),%edx
  // 24. edx -> (rax)
  401164:	89 10                	mov    %edx,(%rax)
  // 25. rax + 4 -> rax
  401166:	48 83 c0 04          	add    $0x4,%rax
  // 26. rax가 정수를 다 읽지 않았다면 루프
  // 스택 배열 내 정수를 a[i] = 7 - a[i] 로 매핑한다.
  40116a:	48 39 f0             	cmp    %rsi,%rax
  40116d:	75 f1                	jne    401160 <phase_6+0x6c>
  // 27. 0 -> esi
  40116f:	be 00 00 00 00       	mov    $0x0,%esi
  401174:	eb 21                	jmp    401197 <phase_6+0xa3>
  // 29-2. (rdx+8) -> rdx; 루프시작
  401176:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  // eax + 1 -> eax
  40117a:	83 c0 01             	add    $0x1,%eax
  // eax != ecx 이면 루프
  40117d:	39 c8                	cmp    %ecx,%eax
  40117f:	75 f5                	jne    401176 <phase_6+0x82>
  // 노드 주소 저장지점으로 이동
  401181:	eb 05                	jmp    401188 <phase_6+0x94>
  // 29-1. 정수가 1 이하이면 29에서 점프하는 지점
  // node 1의 주소값 -> edx
  401183:	ba d0 32 60 00       	mov    $0x6032d0,%edx
  // rdx -> (rsp + 2*rsi + 32)
  401188:	48 89 54 74 20       	mov    %rdx,0x20(%rsp,%rsi,2)
  // rsi + 4 -> rsi
  40118d:	48 83 c6 04          	add    $0x4,%rsi
  // rsi == 24 이면 점프
  401191:	48 83 fe 18          	cmp    $0x18,%rsi
  401195:	74 14                	je     4011ab <phase_6+0xb7>
  // 28. (rsp + rsi) -> ecx
  401197:	8b 0c 34             	mov    (%rsp,%rsi,1),%ecx
  // 29. 1 >= ecx 이면 점프
  40119a:	83 f9 01             	cmp    $0x1,%ecx
  40119d:	7e e4                	jle    401183 <phase_6+0x8f>
  // 29-2. 점프하지 않은경우.
  // 1 -> eax
  40119f:	b8 01 00 00 00       	mov    $0x1,%eax
  // node1 주소 -> edx
  4011a4:	ba d0 32 60 00       	mov    $0x6032d0,%edx
  4011a9:	eb cb                	jmp    401176 <phase_6+0x82>
  // 30. (rsp+32) -> rbx
  // 루프가 완전히 끝난 지점.
  // a[i] == n 일 때 rsp+32를 원점으로 noden의 주소를 배열한다.
  // ex) a[6] == [2, 5, 3, 4, 1, 6]
  // => (rsp+32) == node2, (rsp+40) == node5, ..., (rsp+72) == node6
  // 첫째로 저장된 노드를 가리킨다.
  4011ab:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
  // 31. rsp+40 -> rax
  // 2번째로 저장된 노드
  4011b0:	48 8d 44 24 28       	lea    0x28(%rsp),%rax
  // 32. rsp+50 -> rsi
  // 노드 읽기가 끝났는지 확인하기 위한 비교값
  4011b5:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  // 33. rbx -> rcx
  // 앞 노드 주소
  4011ba:	48 89 d9             	mov    %rbx,%rcx
  // 34. (rax) -> rdx
  // 뒷 노드 주소
  4011bd:	48 8b 10             	mov    (%rax),%rdx
  // 35. rdx -> (rcx+8)
  // 뒷 노드 주소 -> 앞 노드 next 주소 칸
  // 노드는 값8바이트+주소8바이트 로 이루어진 듯 하다.
  4011c0:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  // 36. rax+8 -> rax
  4011c4:	48 83 c0 08          	add    $0x8,%rax
  // 37-1. rsi == rax 이면 루프 종료
  4011c8:	48 39 f0             	cmp    %rsi,%rax
  4011cb:	74 05                	je     4011d2 <phase_6+0xde>
  // 37-2. 아니라면 포인터들 한칸씩 미뤄서 다시 수행.
  // 결과적으로 노드가 배치 순서대로 연결되게 된다.
  // 위의 예시대로라면 node2->node5->...->node6 이런식이다.
  4011cd:	48 89 d1             	mov    %rdx,%rcx
  4011d0:	eb eb                	jmp    4011bd <phase_6+0xc9>
  // 38. 0 -> (rdx+8)
  // 마지막 노드의 next 프로퍼티에는 널포인터가 들어간다.
  4011d2:	48 c7 42 08 00 00 00 	movq   $0x0,0x8(%rdx)
  4011d9:	00 
  // 39. 5 -> ebp
  4011da:	bd 05 00 00 00       	mov    $0x5,%ebp
  // 40. (rbx+8) -> rax
  4011df:	48 8b 43 08          	mov    0x8(%rbx),%rax
  // 41. (rax) -> eax
  4011e3:	8b 00                	mov    (%rax),%eax
  // 42. eax <= (rbx) 이면 안터진다.
  // rbx가 앞 노드, rax가 뒷 노드를 가리킨다.
  // 따라서 노드는 큰 수 순서대로 배치되어야 한다.
  4011e5:	39 03                	cmp    %eax,(%rbx)
  4011e7:	7d 05                	jge    4011ee <phase_6+0xfa>
  4011e9:	e8 4c 02 00 00       	callq  40143a <explode_bomb>
  // 아래는 당연히도 끝 노드까지 반복하는 구문이다.
  // gdb로 노드를 까보자.
  // node1: 0x000000010000014c
  // node2: 0x00000002000000a8
  // node3: 0x000000030000039c
  // node4: 0x00000004000002b3
  // node5: 0x00000005000001dd
  // node6: 0x00000006000001bb
  // 앞의 4바이트만 따서 정수를 비교해야 한다.
  // node3 > 4 > 5 > 6 > 1 > 2 순이다.
  // 중간에 숫자를 뒤집는 파트가 있었다.
  // 따라서 답안은 "4 3 2 1 6 5" 이다.
  4011ee:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
  4011f2:	83 ed 01             	sub    $0x1,%ebp
  4011f5:	75 e8                	jne    4011df <phase_6+0xeb>
  4011f7:	48 83 c4 50          	add    $0x50,%rsp
  4011fb:	5b                   	pop    %rbx
  4011fc:	5d                   	pop    %rbp
  4011fd:	41 5c                	pop    %r12
  4011ff:	41 5d                	pop    %r13
  401201:	41 5e                	pop    %r14
  401203:	c3                   	retq   
  