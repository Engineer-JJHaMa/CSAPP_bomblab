0000000000401062 <phase_5>:
  401062:	53                   	push   %rbx
  // 1. 32바이트 사용
  401063:	48 83 ec 20          	sub    $0x20,%rsp
  // 2. rdi -> rbx
  401067:	48 89 fb             	mov    %rdi,%rbx
  40106a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  401071:	00 00 
  // 3. canary -> rsp+24에 저장
  401073:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  401078:	31 c0                	xor    %eax,%eax
  40107a:	e8 9c 02 00 00       	callq  40131b <string_length>
  // 4. 문자열 길이가 6인지 검사
  40107f:	83 f8 06             	cmp    $0x6,%eax
  401082:	74 4e                	je     4010d2 <phase_5+0x70>
  401084:	e8 b1 03 00 00       	callq  40143a <explode_bomb>
  401089:	eb 47                	jmp    4010d2 <phase_5+0x70>
  // 6. 루프 시작. rbx+rax 주소에 있는 1바이트를 ecx로;n번째 문자 가져오기
  40108b:	0f b6 0c 03          	movzbl (%rbx,%rax,1),%ecx
  // 7. rcx 하위 1바이트를 rsp 주소로 이동하고 이를 다시 rdx로 이동
  40108f:	88 0c 24             	mov    %cl,(%rsp)
  401092:	48 8b 14 24          	mov    (%rsp),%rdx
  // 8. edx & 0xf -> edx; 다시 4비트만 추출
  401096:	83 e2 0f             	and    $0xf,%edx
  // 9. array를 참조한다. 너무 길어서 gdb로 확인해야 할 것 같다.
  // array 내용물 메모. {m, a, d, u, i, e, r, s, n, f, o, t, v, b, y, l}
  401099:	0f b6 92 b0 24 40 00 	movzbl 0x4024b0(%rdx),%edx
  // 10. dl -> rsp+rax+16 주소로
  4010a0:	88 54 04 10          	mov    %dl,0x10(%rsp,%rax,1)
  // 11. rax + 1 -> rax
  4010a4:	48 83 c0 01          	add    $0x1,%rax
  // 12. rax가 6이 아니라면 루프 처음으로
  4010a8:	48 83 f8 06          	cmp    $0x6,%rax
  4010ac:	75 dd                	jne    40108b <phase_5+0x29>
  // 13. 0 -> rsp+22 주소; 문자열 끝에 \0 붙여주는 것 같다.
  4010ae:	c6 44 24 16 00       	movb   $0x0,0x16(%rsp)
  // 14. 0x40245e -> esi; 문자열 까보니 "flyers" 나온다.
  // 즉 array에서 9, 15, 14, 5, 6, 7
  // 16진수로 0x9, f, e, 5, 6, 7
  // 문자는 아스키 준에서 아무거나 따오자.
  // 0x39, 0x3f, 0x3e, 0x35, 0x36, 0x37 -> "9?>567"
  4010b3:	be 5e 24 40 00       	mov    $0x40245e,%esi
  // 15. rsp+16 -> rdi; 가공한 문자열을 인수로 넣는다.
  4010b8:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  // 16. 두 문자열을 비교하여 동일하다면 클리어
  4010bd:	e8 76 02 00 00       	callq  401338 <strings_not_equal>
  4010c2:	85 c0                	test   %eax,%eax
  4010c4:	74 13                	je     4010d9 <phase_5+0x77>
  4010c6:	e8 6f 03 00 00       	callq  40143a <explode_bomb>
  4010cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4010d0:	eb 07                	jmp    4010d9 <phase_5+0x77>
  // 5. 0 -> eax
  4010d2:	b8 00 00 00 00       	mov    $0x0,%eax
  4010d7:	eb b2                	jmp    40108b <phase_5+0x29>
  4010d9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4010de:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4010e5:	00 00 
  4010e7:	74 05                	je     4010ee <phase_5+0x8c>
  4010e9:	e8 42 fa ff ff       	callq  400b30 <__stack_chk_fail@plt>
  4010ee:	48 83 c4 20          	add    $0x20,%rsp
  4010f2:	5b                   	pop    %rbx
  4010f3:	c3                   	retq   
  